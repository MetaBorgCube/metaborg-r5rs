module R5RS

//imports Common

context-free start-symbols Program

// <token> --> <identifier> | <boolean> | <number>
//      | <character> | <string>
//      | ( | ) | #( | ' | ` | , | ,@ | .

// <delimiter> --> <whitespace> | ( | ) | " | ;
// <whitespace> --> <space or newline>
// <comment> --> ;  <all subsequent characters up to a
//                  line break>
// <atmosphere> --> <whitespace> | <comment>
// <intertoken space> --> <atmosphere>*

lexical syntax
  [\ \t\n\r]                  -> LAYOUT
  //";" ~[\n\r]* ([\n\r] | EOF) -> LAYOUT
  ";" ~[\n\r]* [\n\r] -> LAYOUT
//                              -> EOF 
                              
// lexical restrictions                                   
//  EOF  -/- ~[]  // EOF may not be followed by any char    
                        
context-free restrictions
  LAYOUT? -/- [\ \t\n\r\;] // Ensure greedy matching for comments 
  
lexical syntax // identifier

  Initial Subsequent* -> Identifier 
  // <identifier> --> <initial> <subsequent>*
  //      | <peculiar identifier>
  
  [\+\-\=] -> Identifier 
  // <peculiar identifier> --> + | - | ...
  
  [a-z\!\$\%\&\*\/\:\<\>\?\^\_\~] -> Initial
  
  //SpecialInitial -> Initial  
  // <initial> --> <letter> | <special initial>
  // <letter> --> a | b | c | ... | z
  // EV: no uppercase letters?
  //[\!\$\%\&\*\/\:\<\>\?\^\_\~] -> SpecialInitial
  // <special initial> --> ! | $ | % | & | * | / | : | < | =
  //      | > | ? | ^ | _ | ~

  [a-z0-9\+\-\@\!\$\%\&\*\/\:\<\>\?\^\_\~] -> Subsequent
    
  // <subsequent> --> <initial> | <digit>
  //      | <special subsequent>
  // <digit> --> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
  // <special subsequent> --> + | - | .: | @
  
  "let" -> LetKW 
  
lexical restrictions

  Identifier -/- [a-z0-9\+\-\@\!\$\%\&\*\/\:\<\>\?\^\_\~]
  
  LetKW -/- [r] //.[e].[c]

templates // keywords

   Variable = <<Identifier>>   
   // <variable> => <any <identifier> that isn't
   //                 also a <syntactic keyword>>
   
  Variable = <else> {reject}
  Variable = <define> {reject}
  Variable = <unquote> {reject}
  Variable = <unquote-splicing> {reject}
  Variable = <quote> {reject}
  Variable = <lambda> {reject}
  Variable = <if> {reject}
  Variable = <set!> {reject}
  Variable = <begin> {reject}
  Variable = <cond> {reject}
  Variable = <and> {reject}
  Variable = <or> {reject}
  Variable = <case> {reject}
  Variable = <let> {reject}
  Variable = <let*> {reject}
  Variable = <letrec> {reject}
  Variable = <do> {reject}
  Variable = <delay> {reject}
  Variable = <quasiquote> {reject}
    
  // <syntactic keyword> --> <expression keyword>
  //      | else | => | define 
  //      | unquote | unquote-splicing
  // <expression keyword> --> quote | lambda | if
  //      | set! | begin | cond | and | or | case
  //      | let | let* | letrec | do | delay
  //      | quasiquote
   
lexical syntax

  "#\\" ~[] -> Character
   // <character> --> #\ <any character>
   //      | #\ <character name>
   // <character name> --> space | newline

   "\"" StringElement* "\"" -> String
   ~[\"\\]                  -> StringElement
   "\\\""                   -> StringElement
   "\\\\"                   -> StringElement
   // <string> --> " <string element>* "
   // <string element> --> <any character other than " or \>
   //      | \" | \\ 
       
templates // expressions
 
   Boolean.True = <#t>
   Boolean.False = <#f>
   // <boolean> --> #t | #f

templates // numbers
 
  Number.Num = <<INT>>
  // <number> --> <num 2>| <num 8>
  //      | <num 10>| <num 16>

lexical syntax
  [0-9]+ -> INT // TODO: proper definition according to the following
lexical restrictions
  INT -/- [0-9]
  
// The following rules for <num R>, <complex R>, <real R>, <ureal R>, 
// <uinteger R>, and <prefix R> should be replicated for R = 2, 8, 10, and 16. 
// There are no rules for <decimal 2>, <decimal 8>, and <decimal 16>, 
// which means that numbers containing decimal points or exponents must be in decimal radix.


// <num R> --> <prefix R> <complex R>
// <complex R> --> <real R> | <real R> @ <real R>
//     | <real R> + <ureal R> i | <real R> - <ureal R> i
//     | <real R> + i | <real R> - i
//     | + <ureal R> i | - <ureal R> i | + i | - i
// <real R> --> <sign> <ureal R>
// <ureal R> --> <uinteger R>
//     | <uinteger R> / <uinteger R>
//     | <decimal R>
// <decimal 10> --> <uinteger 10> <suffix>
//     | . <digit 10>+ #* <suffix>
//     | <digit 10>+ . <digit 10>* #* <suffix>
//     | <digit 10>+ #+ . #* <suffix>
// <uinteger R> --> <digit R>+ #*
// <prefix R> --> <radix R> <exactness>
//     | <exactness> <radix R>
// 
// <suffix> --> <empty> 
//     | <exponent marker> <sign> <digit 10>+
// <exponent marker> --> e | s | f | d | l
// <sign> --> <empty>  | + |  -
// <exactness> --> <empty> | #i | #e
// <radix 2> --> #b
// <radix 8> --> #o
// <radix 10> --> <empty> | #d
// <radix 16> --> #x
// <digit 2> --> 0 | 1
// <digit 8> --> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
// <digit 10> --> <digit>
// <digit 16> --> <digit 10> | a | b | c | d | e | f 

templates // external representations

  // 7.1.2 External representations
  // <Datum> is what the read procedure (section Input) successfully parses. 
  // Note that any string that parses as an <expression> will also parse as a <datum>.

  Datum = <<Boolean>>
  Datum = <<Number>>
  Datum = <<Character>>
  Datum = <<String>>
  Datum = <<Symbol>>
  // <datum> --> <simple datum> | <compound datum>
  // <simple datum> --> <boolean> | <number>
  //      | <character> | <string> |  <symbol>

  Symbol.Symbol = <<Identifier>>
  // <symbol> --> <identifier>

templates

  Datum.DatumList = <(<Datum*>)>
  Datum.DatumList = <(<Datum+> .: <Datum>)>
  Datum = <<Abbreviation>>
  // <compound datum> --> <list> | <vector>
  // <list> --> (<datum>*) | (<datum>+ .: <datum>)
  //        | <abbreviation>

  Abbreviation.Abbreviation = <<AbbrevPrefix><Datum>>
  // <abbreviation> --> <abbrev prefix> <datum>
  // <abbrev prefix> --> ' | ` | , | ,@
  
  AbbrevPrefix.Quote        = <<Quote>>
  AbbrevPrefix.BackQuote    = "`"
  AbbrevPrefix.QuasiQuote   = ","
  AbbrevPrefix.QuasiQuoteAt = ",@"
   
  Datum.Vector = <#(<Datum*>)>
  // <vector> --> #(<datum>*) 

templates // 7.1.3 Expressions

  // <expression> --> <variable>
  //      | <literal>
  //      | <procedure call>
  //      | <lambda expression>
  //      | <conditional>
  //      | <assignment>
  //      | <derived expression>
  //      | <macro use>
  //      | <macro block>

  Expression.VarRef = <<Variable>>
  // Expression = <<Literal>>
  // Expression = <<ProcedureCall>>
  // Expression = <<LambdaExpression>>
  // Expression = <<Conditional>>
  // Expression = <<Assignment>>
  // Expression = <<DerivedExpression>>
  // Expression = <<MacroUse>>
  // Expression = <<MacroBlock>>
  
  Expression = <<Boolean>>
  Expression = <<Number>>
  Expression = <<String>>
  
  // <literal> --> <quotation> | <self-evaluating>
  // <self-evaluating> --> <boolean> | <number>
  //      | <character> | <string>
  
lexical syntax
  [\'] -> Quote
  
templates
   
  Expression.Quote = <<Quote> <Datum>>
  Expression.Quote = <(quote <Datum>)>
  // <quotation> --> '<datum> | (quote <datum>)

   Expression.ProcedureCall = <(<Expression> <Expression*>)>
   // <procedure call> --> (<operator> <operand>*)
   // <operator> --> <expression>
   // <operand> --> <expression>

   Expression.Lambda = <(lambda <Formals> <Body>)>
   // <lambda expression> --> (lambda <formals> <body>)
   
   Formals.Formals = <(<Formal*>)>
   Formals = <<Formal>>
   Formal.Formal = <<Variable>>
   // <formals> --> (<variable>*) | <variable>
   //      | (<variable>+ .: <variable>)

   Body.Body = <<Definition*> <Sequence>>
   // <body> --> <definition>* <sequence>
   
   Sequence.Sequence = <<Command*> <Expression>>
   // <sequence> --> <command>* <expression>

   Command = <<Expression>>
   // <command> --> <expression>

   Expression.Conditional = <(if <Expression> <Expression> <Expression?>)>
   // <conditional> --> (if <test> <consequent> <alternate>)
   // <test> --> <expression>
   // <consequent> --> <expression>
   // <alternate> --> <expression> | <empty>

   Expression.Assignment = <(set! <Variable> <Expression>)>
   // <assignment> --> (set! <variable> <expression>)
 
   Expression.Cond = <(cond <CondClause+>)>
   Expression.CondElse = <(cond <CondClause+> (else <Sequence>))>
   
   // <derived expression> -->
   //        (cond <cond clause>+)
   //      | (cond <cond clause>* (else <sequence>))

   CondClause.TestSeq = <(<Expression> <Sequence>)>
   CondClause.Test    = <(<Expression>)>
   CondClause.TestRec = [([Expression] => [Expression])]
   // <cond clause> --> (<test> <sequence>)
   //       | (<test>)
   //       | (<test> => <recipient>)
   // <recipient> --> <expression>

  Expression.Case = 
    <(case <Expression>
       <CaseClause+>)>
       
  Expression.CaseElse = 
    <(case <Expression>
       <CaseClause*>
       (else <Sequence>))>

  CaseClause.CaseClause = <((<Datum*>) <Sequence>)>
                
    //      | (case <expression>
    //          <case clause>+)
    //      | (case <expression>
    //          <case clause>*
    //          (else <sequence>))
    // <case clause> --> ((<datum>*) <sequence>)
    
  Expression.And = <(and <Expression*>)>
  Expression.Or  = <(or <Expression*>)>
    //      | (and <test>*)
    //      | (or <test>*)

  Expression.Let = <(let (<BindingSpec*>) <Body>)>
   //      | (let (<binding spec>*) <body>)
   
  Expression.LetVar = <(<LetKW> <Variable> (<BindingSpec*>) <Body>)>
   //      | (let <variable> (<binding spec>*) <body>)
   
  BindingSpec.BindingSpec = <(<Bind> <Expression>)>
  Bind.Bind = <<Variable>>
  // <binding spec> --> (<variable> <expression>)

//      | (let* (<binding spec>*) <body>)

  Expression.LetRec = <letrec (<BindingSpec*>) <Body>>
  //      | (letrec (<binding spec>*) <body>)

  Expression.Begin = <(begin <Sequence>)>
  //      | (begin <sequence>)

  Expression.Do = <
    (do (<IterationSpec*>)
        (<Expression> <Sequence?>)
        <Command*>)
  >
  //      | (do (<iteration spec>*)
  //            (<test> <do result>)
  //          <command>*)
  // <do result> --> <sequence> | <empty>
  
  IterationSpec.Step = <(<Variable> <Expression> <Expression>)>
  IterationSpec.Init = <(<Variable> <Expression>)>
  // <iteration spec> --> (<variable> <init> <step>)
  //     | (<variable> <init>)
  // <init> --> <expression>
  // <step> --> <expression>
  
  Expression.Delay = <(delay <Expression>)>
  //      | (delay <expression>)

  //      | <quasiquotation>





// 
// <macro use> --> (<keyword> <datum>*)
// <keyword> --> <identifier>
// 
// <macro block> -->
//      (let-syntax (<syntax spec>*) <body>)
//      | (letrec-syntax (<syntax spec>*) <body>)
// <syntax spec> --> (<keyword> <transformer spec>)
// 

templates // quasiquotations

// 7.1.4 Quasiquotations
// The following grammar for quasiquote expressions is not context-free. It is presented as a recipe for generating an infinite number of production rules. Imagine a copy of the following rules for D = 1, 2,3, .... D keeps track of the nesting depth.
// 
// <quasiquotation> --> <quasiquotation 1>
// <qq template 0> --> <expression>
// <quasiquotation D> --> `<qq template D>
//        | (quasiquote <qq template D>)
// <qq template D> --> <simple datum>
//        | <list qq template D>
//        | <vector qq template D>
//        | <unquotation D>
// <list qq template D> --> (<qq template or splice D>*)
//        | (<qq template or splice D>+ .: <qq template D>)
//        | '<qq template D>
//        | <quasiquotation D+1>
// <vector qq template D> --> #(<qq template or splice D>*)
// <unquotation D> --> ,<qq template D-1>
//        | (unquote <qq template D-1>)
// <qq template or splice D> --> <qq template D>
//        | <splicing unquotation D>
// <splicing unquotation D> --> ,@<qq template D-1>
//        | (unquote-splicing <qq template D-1>) 
// 
// In <quasiquotation>s, a <list qq template D> can sometimes be 
// confused with either an <unquotation D> or a <splicing unquotation D>. 
// The interpretation as an <unquotation> or <splicing unquotation D> takes 
// precedence.

templates // transformers

// 7.1.5 Transformers
// 
// <transformer spec> -->
//     (syntax-rules (<identifier>*) <syntax rule>*)
// <syntax rule> --> (<pattern> <template>)
// <pattern> --> <pattern identifier>
//      | (<pattern>*)
//      | (<pattern>+ . <pattern>)
//      | (<pattern>* <pattern> <ellipsis>)
//      | #(<pattern>*)
//      | #(<pattern>* <pattern> <ellipsis>)
//      | <pattern datum>
// <pattern datum> --> <string>
//      | <character>
//      | <boolean>
//      | <number>
// <template> --> <pattern identifier>
//      | (<template element>*)
//      | (<template element>+ . <template>)
//      | #(<template element>*)
//      | <template datum>
// <template element> --> <template>
//      | <template> <ellipsis>
// <template datum> --> <pattern datum>
// <pattern identifier> --> <any identifier except ...>
// <ellipsis> --> <the identifier ...>

templates // programs and definitions

  // 7.1.6 Programs and definitions 

  Program.Program = <<CommandOrDefinition*>>
  // <program> --> <command or definition>*
   
   CommandOrDefinition = <<Command>>
   CommandOrDefinition = <<Definition>>
   CommandOrDefinition.Begin = <(begin <CommandOrDefinition*>)>
   // <command or definition> --> <command>
   //     | <definition>
   //     | <syntax definition>
   //     | (begin <command or definition>+)
   
   Definition.VarDef  = <(define <Variable> <Expression>)>
   Definition.ProcDef = <(define (<Variable> <DefFormals>) <Body>)>
   Definition.DefSeq  = <(begin <Definition*>)>
   // <definition> --> (define <variable> <expression>)
   //       | (define (<variable> <def formals>) <body>)
   //       | (begin <definition>*)

   DefFormals.Formals = <<Variable *>>
   // <def formals> --> <variable>*
   //       | <variable>* .: <variable>
   // <syntax definition> -->
   //      (define-syntax <keyword> <transformer spec>)

